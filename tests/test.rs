extern crate chacha;

#[test]
fn quarter_round_test_vector() {
  let a = 0x11111111;
  let b = 0x01020304;
  let c = 0x9b8d6f43;
  let d = 0x01234567;

  let (a, b, c, d) = chacha::quarter_round(a, b, c, d);

  assert_eq!(a, 0xea2a92f4);
  assert_eq!(b, 0xcb1cf8ce);
  assert_eq!(c, 0x4581472e);
  assert_eq!(d, 0x5881c4bb);
}

#[test]
fn chacha20_block_test_vector() {
  let key: Vec<u32> = vec![
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  ];

  let nonce: Vec<u32> = vec![
    0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00,
  ];

  let block_count = 0u32;

  let res = chacha::chacha20_block(&key, &nonce, block_count);
  let expected = vec![
    0xe4e7f110,  0x15593bd1,  0x1fdd0f50,  0xc47120a3,
    0xc7f4d1c7,  0x0368c033,  0x9aaa2204,  0x4e6cd4c3,
    0x466482d2,  0x09aa9f07,  0x05d7c214,  0xa2028bd9,
    0xd19c12b5,  0xb94e16de,  0xe883d0cb,  0x4e3c50a2,
  ];

  println!("{:?}", res);

  assert_eq!(res, expected);
}

fn to_u8(from: Vec<u32>) -> Vec<u8> {
  let max = from.len() * 4;
  let writer = Vec::with_capacity(max);

  for byte in from {
    writer.write_u32::<LE>(byte).unwrap();
  }

  writer
}
